import threading

from jinja2 import Environment, FileSystemLoader, select_autoescape
from whoosh.index import open_dir
from whoosh.qparser import QueryParser
from whoosh.qparser.dateparse import DateParserPlugin

from tinyapp.app import TinyApp, TinyRequest
from tinyapp.handler import ReqHandler
import tinyapp.auth


class SearchApp(TinyApp):
    """SearchApp: The TinyApp class.
    """
    
    def __init__(self, config, hanclasses):
        TinyApp.__init__(self, hanclasses)

        self.masterindexpath = config['DEFAULT']['MasterIndexXML']
        self.searchindexdir = config['Search']['SearchIndexDir']
        self.approot = config['Search']['AppRoot']
        self.resultsdomain = config['Search'].get('ArchiveDomain', '')
        self.template_path = config['Search']['TemplateDir']
        self.pagelen = int(config['Search']['ResultsPerPage'])
        self.querytimeout = float(config['Search']['QueryTimeout'])

        # Thread-local storage for various things which are not thread-safe.
        self.threadcache = threading.local()

        # This will fail if there's no search index at all.
        # Allow that for the moment.
        try:
            self.searchindex = open_dir(self.searchindexdir)
            self.queryparser = QueryParser('description', self.searchindex.schema)
            self.queryparser.add_plugin(DateParserPlugin(free=True))
        except Exception as ex:
            self.logwarning(None, 'Unable to open search index: %s', ex)
            self.searchindex = None
            self.queryparser = None

    def getjenv(self):
        """Get or create a jinja template environment. These are
        cached per-thread.
        """
        jenv = getattr(self.threadcache, 'jenv', None)
        if jenv is None:
            jenv = Environment(
                loader = FileSystemLoader(self.template_path),
                extensions = [
                ],
                autoescape = select_autoescape(),
                keep_trailing_newline = True,
            )
            jenv.globals['approot'] = self.approot
            jenv.globals['resultsdomain'] = self.resultsdomain
            #jenv.globals['appcssuri'] = self.app_css_uri
            self.threadcache.jenv = jenv
        return jenv

    def getsearcher(self):
        """Create and return a Whoosh searcher.
        I could cache these (per thread), but they hold both cached data
        and open file handles. I wouldn't want to keep them alive indefinitely.
        Maybe if there was a timeout to close and discard them?
        (Note: if we go down this road, adjust the caller to *not* close
        the searcher after use.)
        """
        searcher = self.searchindex.searcher()
        return searcher

    def create_request(self, environ):
        """Create a request object.
        Returns our subclass of TinyRequest.
        """
        return SearchRequest(self, environ)


class SearchRequest(TinyRequest):

    def lognote(self):
        """A string which will appear in any log line generated by this
        request. We show the IP address.
        """
        return self.env.get('REMOTE_ADDR', '???')
